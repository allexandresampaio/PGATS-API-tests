{
  "stats": {
    "suites": 8,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-16T17:54:05.432Z",
    "end": "2025-09-16T17:54:05.586Z",
    "duration": 154,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "88776edc-989f-4a77-a6af-faa7f3e2f19f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "469e121b-8934-46e8-8eab-444e51c15fc7",
          "title": "Transfer Controller",
          "fullFile": "/Users/allexandresampaio/PGATS-Projects/PGATS-API-tests/test/controller/transferController.test.js",
          "file": "/test/controller/transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f8668b9c-1754-4f69-9d80-75e5d402c9af",
              "title": "POST, /api/transfer",
              "fullFile": "/Users/allexandresampaio/PGATS-Projects/PGATS-API-tests/test/controller/transferController.test.js",
              "file": "/test/controller/transferController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST, /api/transfer\"",
                  "fullTitle": "Transfer Controller POST, /api/transfer \"before each\" hook in \"POST, /api/transfer\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//capturar o token\nconst respostaLogin = await request(app)\n    .post('/api/auth/login')\n    .send({\n        \"username\": \"alle\",\n        \"password\": \"123456\"\n    });\nthis.tokenCapturado = respostaLogin.body.token;",
                  "err": {},
                  "uuid": "02b4ef81-5cf3-4bf7-b957-52aa84f3b816",
                  "parentUUID": "f8668b9c-1754-4f69-9d80-75e5d402c9af",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"POST, /api/transfer\"",
                  "fullTitle": "Transfer Controller POST, /api/transfer \"after each\" hook in \"POST, /api/transfer\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Resete o mock\nsinon.restore();",
                  "err": {},
                  "uuid": "bb5a25fb-092c-42a8-b92f-166a9df1a8d4",
                  "parentUUID": "f8668b9c-1754-4f69-9d80-75e5d402c9af",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Quando informo origem e destino inexistentes, o retorno será 400",
                  "fullTitle": "Transfer Controller POST, /api/transfer Quando informo origem e destino inexistentes, o retorno será 400",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/api/transfer')\n    .set('Authorization', `Bearer ${this.tokenCapturado}`)\n    .send({\n        from: \"allexandre\",\n        to: \"andresa\",\n        amount: 50\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');",
                  "err": {},
                  "uuid": "13215c06-ea4e-44c3-985c-528ee77d6855",
                  "parentUUID": "f8668b9c-1754-4f69-9d80-75e5d402c9af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo origem e destino inexistentes, o retorno será 400",
                  "fullTitle": "Transfer Controller POST, /api/transfer Usando Mocks: Quando informo origem e destino inexistentes, o retorno será 400",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.throws(new Error('Usuário remetente ou destinatário não encontrado'));\n           const resposta = await request(app)\n    .post('/api/transfer')\n    .set('Authorization', `Bearer ${this.tokenCapturado}`)\n    .send({\n        from: \"allexandre\",\n        to: \"andresa\",\n        amount: 50\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');\n//Resete o mock\nsinon.restore();",
                  "err": {},
                  "uuid": "cb73be9e-1c33-4476-a688-c8849f9b5737",
                  "parentUUID": "f8668b9c-1754-4f69-9d80-75e5d402c9af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo origem e destino existentes, o retorno será 201",
                  "fullTitle": "Transfer Controller POST, /api/transfer Usando Mocks: Quando informo origem e destino existentes, o retorno será 201",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.returns({\n    from: \"alle\",\n    to: \"desa\",\n    amount: 50,\n    date: new Date().toISOString()\n});\nconst resposta = await request(app)\n    .post('/api/transfer')\n    .set('Authorization', `Bearer ${this.tokenCapturado}`)\n    .send({\n        from: \"alle\",\n        to: \"desa\",\n        amount: 50\n    });\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property('from', 'alle');\nexpect(resposta.body).to.have.property('to', 'desa');\nexpect(resposta.body).to.have.property('amount', 50);\n//Resete o mock\nsinon.restore();",
                  "err": {},
                  "uuid": "a9aca1a1-7a75-4788-bd10-55edac4ac10a",
                  "parentUUID": "f8668b9c-1754-4f69-9d80-75e5d402c9af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks e Fixture: Quando informo origem e destino existentes, o retorno será 201",
                  "fullTitle": "Transfer Controller POST, /api/transfer Usando Mocks e Fixture: Quando informo origem e destino existentes, o retorno será 201",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Mockar apenas a funcão transfer do Service            \nconst transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.returns({\n    from: \"alle\",\n    to: \"desa\",\n    amount: 50,\n    date: new Date().toISOString()\n});\nconst resposta = await request(app)\n    .post('/api/transfer')\n    .set('Authorization', `Bearer ${this.tokenCapturado}`)\n    .send({\n        from: \"alle\",\n        to: \"desa\",\n        amount: 50\n    });\nexpect(resposta.status).to.equal(201);\n\n//Validação com fixture\nconst respostaEsperada = require('../fixture/respostas/return-origemDestinoOkStatus201.json')\ndelete resposta.body.date;\ndelete respostaEsperada.date;\nexpect(respostaEsperada).to.deep.equal(respostaEsperada);\n\n//expect(resposta.body).to.have.property('from', 'alle');\n//expect(resposta.body).to.have.property('to', 'desa');\n//expect(resposta.body).to.have.property('amount', 50);",
                  "err": {},
                  "uuid": "418e108f-0e51-42bd-ae22-37b42ce5b7d8",
                  "parentUUID": "f8668b9c-1754-4f69-9d80-75e5d402c9af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13215c06-ea4e-44c3-985c-528ee77d6855",
                "cb73be9e-1c33-4476-a688-c8849f9b5737",
                "a9aca1a1-7a75-4788-bd10-55edac4ac10a",
                "418e108f-0e51-42bd-ae22-37b42ce5b7d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c7aeec36-4154-4439-a2f6-4aecb9a1dbb2",
          "title": "User Controller",
          "fullFile": "/Users/allexandresampaio/PGATS-Projects/PGATS-API-tests/test/controller/userController.test.js",
          "file": "/test/controller/userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5c938e6e-fc84-48ed-a406-f6f772bc5f96",
              "title": "GET, /api/users",
              "fullFile": "/Users/allexandresampaio/PGATS-Projects/PGATS-API-tests/test/controller/userController.test.js",
              "file": "/test/controller/userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando busco por usuários, o retorno será 200",
                  "fullTitle": "User Controller GET, /api/users Quando busco por usuários, o retorno será 200",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .get('/api/users');\n\nexpect(resposta.status).to.equal(200);",
                  "err": {},
                  "uuid": "3d78528d-b534-474c-b2f3-66d9f1d5012f",
                  "parentUUID": "5c938e6e-fc84-48ed-a406-f6f772bc5f96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d78528d-b534-474c-b2f3-66d9f1d5012f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e6b94578-cb97-4116-a1c7-7552a49f1ef6",
          "title": "Transfer External",
          "fullFile": "/Users/allexandresampaio/PGATS-Projects/PGATS-API-tests/test/external/transferExternal.test.js",
          "file": "/test/external/transferExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "075e5fe6-0f74-4170-a5c8-9a44bbff7f5c",
              "title": "POST, /api/transfer",
              "fullFile": "/Users/allexandresampaio/PGATS-Projects/PGATS-API-tests/test/external/transferExternal.test.js",
              "file": "/test/external/transferExternal.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo origem e destino inexistentes, o retorno será 400",
                  "fullTitle": "Transfer External POST, /api/transfer Quando informo origem e destino inexistentes, o retorno será 400",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//capturar o token\nconst respostaLogin = await request('http://localhost:3000')\n    .post('/api/auth/login')\n    .send({\n        \"username\": \"alle\",\n        \"password\": \"123456\"\n    });\n    \nconst tokenCapturado = respostaLogin.body.token;\n//console.log(\"_________________________\")\n//console.log(respostaLogin.body)\n//console.log(tokenCapturado)\n//console.log(\"_________________________\")\n\nconst resposta = await request('http://localhost:3000')\n    .post('/api/transfer')\n    .set('Authorization', `Bearer ${tokenCapturado}`)\n    .send({\n        from: \"alle\",\n        to: \"andresa\", //usuario inexistente\n        amount: 50\n    });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');",
                  "err": {},
                  "uuid": "a54ef32d-0077-4812-b0b5-275b800398db",
                  "parentUUID": "075e5fe6-0f74-4170-a5c8-9a44bbff7f5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a54ef32d-0077-4812-b0b5-275b800398db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 38,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "26a7f282-52ed-412f-8110-88ea6e1e10d5",
          "title": "User External",
          "fullFile": "/Users/allexandresampaio/PGATS-Projects/PGATS-API-tests/test/external/userExternal.test.js",
          "file": "/test/external/userExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8df5ac67-2a8b-4be5-a858-8e20e8285b3c",
              "title": "GET, /api/users",
              "fullFile": "/Users/allexandresampaio/PGATS-Projects/PGATS-API-tests/test/external/userExternal.test.js",
              "file": "/test/external/userExternal.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando busco por usuários, o retorno será 200",
                  "fullTitle": "User External GET, /api/users Quando busco por usuários, o retorno será 200",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(\"http://localhost:3000\")\n    .get('/api/users');\n\nexpect(resposta.status).to.equal(200);",
                  "err": {},
                  "uuid": "16320c46-ca6f-4fa6-88eb-78efc085a243",
                  "parentUUID": "8df5ac67-2a8b-4be5-a858-8e20e8285b3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16320c46-ca6f-4fa6-88eb-78efc085a243"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}